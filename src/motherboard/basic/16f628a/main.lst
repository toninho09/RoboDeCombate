CCS PCM C Compiler, Version 4.074, 38112               23-mar-14 12:56

               Filename: C:\Users\Zenner\SkyDrive\RDC\RoboDeCombate\src\motherboard\basic\16f628a\main.lst

               ROM used: 567 words (28%)
                         Largest free fragment is 1481
               RAM used: 27 (12%) at main() level
                         36 (16%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   1F4
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  28
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  MOVF   7B,W
0019:  MOVWF  27
001A:  BCF    03.7
001B:  BCF    03.5
001C:  MOVLW  8C
001D:  MOVWF  04
001E:  BTFSS  00.0
001F:  GOTO   022
0020:  BTFSC  0C.0
0021:  GOTO   035
0022:  MOVF   22,W
0023:  MOVWF  04
0024:  MOVF   23,W
0025:  MOVWF  77
0026:  MOVF   24,W
0027:  MOVWF  78
0028:  MOVF   25,W
0029:  MOVWF  79
002A:  MOVF   26,W
002B:  MOVWF  7A
002C:  MOVF   27,W
002D:  MOVWF  7B
002E:  MOVF   28,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
.................... #include "main.h" 
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
....................  
.................... #use delay(clock=4000000) 
.................... #use rs232(baud=2400,parity=N,xmit=PIN_B2,rcv=PIN_B1,bits=8) 
....................  
....................  
.................... #include "lib/config.c" 
.................... /** 
.................... A0 = USE MOTOR_0 
.................... A1 = USE MOTOR_0 
.................... A2 = NOT USE 
.................... A3 = NOT USE 
.................... A4 = NOT USE 
.................... A5 = MRCLR 
.................... A6 = USE MOTOR_1 
.................... A7 = USE MOTOR_1 
.................... B0 = NOT USE 
.................... B1 = USE RX 
.................... B2 = USE TX 
.................... B3 = USE LED 
.................... B4 = USE MOTOR_2 
.................... B5 = USE MOTOR_2 
.................... B6 = USE MOTOR_3 
.................... B7 = USE MOTOR_3 
.................... */ 
.................... /* campos para validação de comando  
....................    todas as mensagens devem ser enviadas da seguinte maneira 
....................    msg_valid_1 , msg_valid_2 , comando 1 , comando 2 
....................    tem a funçao de evitar statica e recebimento indevido 
....................  
.................... */ 
.................... const int msg_valid_1 = 0xf0; 
.................... const int msg_valid_2 = 0x20; 
.................... //estrutura para facilitar o uso dos pinos em funções 
.................... struct MotorPin 
.................... { 
....................    int pin_enable; 
....................    int pin_dir; 
.................... }; 
....................  
.................... // cria o numero de esquemas do struct desejada , corresponde ao numero 
.................... // de motores que vc quer controlar 
.................... struct Motorpin motorpin[4]; 
....................  
.................... // variavel para armazenar os comandos recebidos do serial; 
.................... int cmd[3]; 
....................  
.................... // constante criada para facilitar a chamada do led no programa 
.................... const int led = PIN_A2; 
....................  
.................... // função de configuração , não altere se nao souber o que esta fazendo 
.................... void config() 
.................... { 
....................    motorpin[0].pin_enable = PIN_A0; 
*
0038:  MOVLW  28
0039:  MOVWF  29
....................    motorpin[0].pin_dir = PIN_A1; 
003A:  MOVLW  29
003B:  MOVWF  2A
....................    motorpin[1].pin_enable = PIN_A6; 
003C:  MOVLW  2E
003D:  MOVWF  2B
....................    motorpin[1].pin_dir = PIN_A7; 
003E:  MOVLW  2F
003F:  MOVWF  2C
....................    motorpin[2].pin_enable = PIN_B4; 
0040:  MOVLW  34
0041:  MOVWF  2D
....................    motorpin[2].pin_dir = PIN_B5; 
0042:  MOVLW  35
0043:  MOVWF  2E
....................    motorpin[3].pin_enable = PIN_B6; 
0044:  MOVLW  36
0045:  MOVWF  2F
....................    motorpin[3].pin_dir = PIN_B7; 
0046:  MOVLW  37
0047:  MOVWF  30
.................... } 
0048:  GOTO   22A (RETURN)
....................  
....................  
.................... #include "lib/comand.c" 
.................... void Sync() 
.................... { 
....................    set_timer1 (0) ; 
*
005D:  CLRF   0F
005E:  CLRF   0E
.................... } 
....................  
.................... void moverMotor(struct Motorpin motorpin,int comando) 
.................... { 
....................    switch (comando) 
....................    { 
*
0085:  MOVF   37,W
0086:  ADDLW  FC
0087:  BTFSC  03.0
0088:  GOTO   0FB
0089:  ADDLW  04
008A:  GOTO   0FC
....................       case 0: 
....................       { 
....................          output_low (motorPin.pin_enable); 
008B:  MOVF   35,W
008C:  MOVWF  38
008D:  CLRF   39
008E:  CLRF   3B
008F:  CLRF   3A
0090:  CALL   065
0091:  MOVF   35,W
0092:  MOVWF  38
0093:  CLRF   39
0094:  CLRF   3B
0095:  MOVLW  80
0096:  MOVWF  3A
0097:  CALL   065
....................          output_low (motorPin.pin_dir); 
0098:  MOVF   36,W
0099:  MOVWF  38
009A:  CLRF   39
009B:  CLRF   3B
009C:  CLRF   3A
009D:  CALL   065
009E:  MOVF   36,W
009F:  MOVWF  38
00A0:  CLRF   39
00A1:  CLRF   3B
00A2:  MOVLW  80
00A3:  MOVWF  3A
00A4:  CALL   065
....................       }break; 
00A5:  GOTO   0FB
....................  
....................       case 1: 
....................       { 
....................          output_low (motorPin.pin_enable); 
00A6:  MOVF   35,W
00A7:  MOVWF  38
00A8:  CLRF   39
00A9:  CLRF   3B
00AA:  CLRF   3A
00AB:  CALL   065
00AC:  MOVF   35,W
00AD:  MOVWF  38
00AE:  CLRF   39
00AF:  CLRF   3B
00B0:  MOVLW  80
00B1:  MOVWF  3A
00B2:  CALL   065
....................          output_high (motorPin.pin_dir); 
00B3:  MOVF   36,W
00B4:  MOVWF  38
00B5:  MOVLW  01
00B6:  MOVWF  39
00B7:  CLRF   3B
00B8:  CLRF   3A
00B9:  CALL   065
00BA:  MOVF   36,W
00BB:  MOVWF  38
00BC:  CLRF   39
00BD:  CLRF   3B
00BE:  MOVLW  80
00BF:  MOVWF  3A
00C0:  CALL   065
....................       }break; 
00C1:  GOTO   0FB
....................  
....................       case 2: 
....................       { 
....................          output_high (motorPin.pin_enable); 
00C2:  MOVF   35,W
00C3:  MOVWF  38
00C4:  MOVLW  01
00C5:  MOVWF  39
00C6:  CLRF   3B
00C7:  CLRF   3A
00C8:  CALL   065
00C9:  MOVF   35,W
00CA:  MOVWF  38
00CB:  CLRF   39
00CC:  CLRF   3B
00CD:  MOVLW  80
00CE:  MOVWF  3A
00CF:  CALL   065
....................          output_low (motorPin.pin_dir); 
00D0:  MOVF   36,W
00D1:  MOVWF  38
00D2:  CLRF   39
00D3:  CLRF   3B
00D4:  CLRF   3A
00D5:  CALL   065
00D6:  MOVF   36,W
00D7:  MOVWF  38
00D8:  CLRF   39
00D9:  CLRF   3B
00DA:  MOVLW  80
00DB:  MOVWF  3A
00DC:  CALL   065
....................       }break; 
00DD:  GOTO   0FB
....................  
....................       case 3: 
....................       { 
....................          output_high (motorPin.pin_enable); 
00DE:  MOVF   35,W
00DF:  MOVWF  38
00E0:  MOVLW  01
00E1:  MOVWF  39
00E2:  CLRF   3B
00E3:  CLRF   3A
00E4:  CALL   065
00E5:  MOVF   35,W
00E6:  MOVWF  38
00E7:  CLRF   39
00E8:  CLRF   3B
00E9:  MOVLW  80
00EA:  MOVWF  3A
00EB:  CALL   065
....................          output_high (motorPin.pin_dir); 
00EC:  MOVF   36,W
00ED:  MOVWF  38
00EE:  MOVLW  01
00EF:  MOVWF  39
00F0:  CLRF   3B
00F1:  CLRF   3A
00F2:  CALL   065
00F3:  MOVF   36,W
00F4:  MOVWF  38
00F5:  CLRF   39
00F6:  CLRF   3B
00F7:  MOVLW  80
00F8:  MOVWF  3A
00F9:  CALL   065
....................       }break; 
00FA:  GOTO   0FB
....................    } 
.................... } 
00FB:  RETLW  00
....................  
.................... int1 ReceberComando() 
.................... { 
....................    cmd[0]=getc (); 
*
0049:  BTFSS  0C.5
004A:  GOTO   049
004B:  MOVF   1A,W
004C:  MOVWF  31
....................  
....................    if (cmd[0]==msg_valid_1)//valida o primeiro comando 
004D:  MOVF   31,W
004E:  SUBLW  F0
004F:  BTFSS  03.2
0050:  GOTO   062
....................    { 
....................       cmd[1]=getc (); 
0051:  BTFSS  0C.5
0052:  GOTO   051
0053:  MOVF   1A,W
0054:  MOVWF  32
....................  
....................       if (cmd[1]==msg_valid_2)//valida o segundo comando 
0055:  MOVF   32,W
0056:  SUBLW  20
0057:  BTFSS  03.2
0058:  GOTO   062
....................       { 
....................          cmd[2]=getc ();//recebe o comando 
0059:  BTFSS  0C.5
005A:  GOTO   059
005B:  MOVF   1A,W
005C:  MOVWF  33
....................          Sync () ; 
....................          return 1; 
*
005F:  MOVLW  01
0060:  MOVWF  78
0061:  GOTO   064
....................       } 
....................    } 
....................  
....................    return 0; 
0062:  MOVLW  00
0063:  MOVWF  78
.................... } 
0064:  GOTO   22B (RETURN)
....................  
.................... void verificaComando(int cmd) 
.................... { 
....................    switch (cmd) 
....................    { 
*
0104:  MOVF   34,W
0105:  XORLW  00
0106:  BTFSC  03.2
0107:  GOTO   157
0108:  XORLW  01
0109:  BTFSC  03.2
010A:  GOTO   15E
010B:  XORLW  03
010C:  BTFSC  03.2
010D:  GOTO   166
010E:  XORLW  01
010F:  BTFSC  03.2
0110:  GOTO   16E
0111:  XORLW  13
0112:  BTFSC  03.2
0113:  GOTO   176
0114:  XORLW  01
0115:  BTFSC  03.2
0116:  GOTO   17D
0117:  XORLW  03
0118:  BTFSC  03.2
0119:  GOTO   185
011A:  XORLW  01
011B:  BTFSC  03.2
011C:  GOTO   18D
011D:  XORLW  33
011E:  BTFSC  03.2
011F:  GOTO   195
0120:  XORLW  01
0121:  BTFSC  03.2
0122:  GOTO   19C
0123:  XORLW  03
0124:  BTFSC  03.2
0125:  GOTO   1A4
0126:  XORLW  01
0127:  BTFSC  03.2
0128:  GOTO   1AC
0129:  XORLW  13
012A:  BTFSC  03.2
012B:  GOTO   1B4
012C:  XORLW  01
012D:  BTFSC  03.2
012E:  GOTO   1BB
012F:  XORLW  03
0130:  BTFSC  03.2
0131:  GOTO   1C3
0132:  XORLW  01
0133:  BTFSC  03.2
0134:  GOTO   1CB
0135:  XORLW  93
0136:  BTFSC  03.2
0137:  GOTO   1D3
0138:  XORLW  01
0139:  BTFSC  03.2
013A:  GOTO   1D5
013B:  XORLW  03
013C:  BTFSC  03.2
013D:  GOTO   1D8
013E:  XORLW  01
013F:  BTFSC  03.2
0140:  GOTO   1DB
0141:  XORLW  07
0142:  BTFSC  03.2
0143:  GOTO   1DE
0144:  XORLW  01
0145:  BTFSC  03.2
0146:  GOTO   1E1
0147:  XORLW  03
0148:  BTFSC  03.2
0149:  GOTO   1E4
014A:  XORLW  01
014B:  BTFSC  03.2
014C:  GOTO   1E7
014D:  XORLW  0F
014E:  BTFSC  03.2
014F:  GOTO   1EA
0150:  XORLW  01
0151:  BTFSC  03.2
0152:  GOTO   1ED
0153:  XORLW  03
0154:  BTFSC  03.2
0155:  GOTO   1F0
0156:  GOTO   1F3
....................       case 0x00 : 
....................       { 
....................          moverMotor (motorpin[0], 0) ; 
0157:  MOVF   2A,W
0158:  MOVWF  36
0159:  MOVF   29,W
015A:  MOVWF  35
015B:  CLRF   37
015C:  CALL   085
....................       }break; 
015D:  GOTO   1F3
....................  
....................       case 0x01 : 
....................       { 
....................          moverMotor (motorpin[0], 1) ; 
015E:  MOVF   2A,W
015F:  MOVWF  36
0160:  MOVF   29,W
0161:  MOVWF  35
0162:  MOVLW  01
0163:  MOVWF  37
0164:  CALL   085
....................       }break; 
0165:  GOTO   1F3
....................  
....................       case 0x02 : 
....................       { 
....................          moverMotor (motorpin[0], 2) ; 
0166:  MOVF   2A,W
0167:  MOVWF  36
0168:  MOVF   29,W
0169:  MOVWF  35
016A:  MOVLW  02
016B:  MOVWF  37
016C:  CALL   085
....................       }break; 
016D:  GOTO   1F3
....................  
....................       case 0x03 : 
....................       { 
....................          moverMotor (motorpin[0], 3) ; 
016E:  MOVF   2A,W
016F:  MOVWF  36
0170:  MOVF   29,W
0171:  MOVWF  35
0172:  MOVLW  03
0173:  MOVWF  37
0174:  CALL   085
....................       }break; 
0175:  GOTO   1F3
....................  
....................       case 0x10 : 
....................       { 
....................          moverMotor (motorpin[1], 0) ; 
0176:  MOVF   2C,W
0177:  MOVWF  36
0178:  MOVF   2B,W
0179:  MOVWF  35
017A:  CLRF   37
017B:  CALL   085
....................       }break; 
017C:  GOTO   1F3
....................  
....................       case 0x11 : 
....................       { 
....................          moverMotor (motorpin[1], 1) ; 
017D:  MOVF   2C,W
017E:  MOVWF  36
017F:  MOVF   2B,W
0180:  MOVWF  35
0181:  MOVLW  01
0182:  MOVWF  37
0183:  CALL   085
....................       }break; 
0184:  GOTO   1F3
....................  
....................       case 0x12 : 
....................       { 
....................          moverMotor (motorpin[1], 2) ; 
0185:  MOVF   2C,W
0186:  MOVWF  36
0187:  MOVF   2B,W
0188:  MOVWF  35
0189:  MOVLW  02
018A:  MOVWF  37
018B:  CALL   085
....................       }break; 
018C:  GOTO   1F3
....................  
....................       case 0x13 : 
....................       { 
....................          moverMotor (motorpin[1], 3) ; 
018D:  MOVF   2C,W
018E:  MOVWF  36
018F:  MOVF   2B,W
0190:  MOVWF  35
0191:  MOVLW  03
0192:  MOVWF  37
0193:  CALL   085
....................       }break; 
0194:  GOTO   1F3
....................  
....................       case 0x20 : 
....................       { 
....................          moverMotor (motorpin[2], 0) ; 
0195:  MOVF   2E,W
0196:  MOVWF  36
0197:  MOVF   2D,W
0198:  MOVWF  35
0199:  CLRF   37
019A:  CALL   085
....................       }break; 
019B:  GOTO   1F3
....................  
....................       case 0x21 : 
....................       { 
....................          moverMotor (motorpin[2], 1) ; 
019C:  MOVF   2E,W
019D:  MOVWF  36
019E:  MOVF   2D,W
019F:  MOVWF  35
01A0:  MOVLW  01
01A1:  MOVWF  37
01A2:  CALL   085
....................       }break; 
01A3:  GOTO   1F3
....................  
....................       case 0x22 : 
....................       { 
....................          moverMotor (motorpin[2], 2) ; 
01A4:  MOVF   2E,W
01A5:  MOVWF  36
01A6:  MOVF   2D,W
01A7:  MOVWF  35
01A8:  MOVLW  02
01A9:  MOVWF  37
01AA:  CALL   085
....................       }break; 
01AB:  GOTO   1F3
....................  
....................       case 0x23 : 
....................       { 
....................          moverMotor (motorpin[2], 3) ; 
01AC:  MOVF   2E,W
01AD:  MOVWF  36
01AE:  MOVF   2D,W
01AF:  MOVWF  35
01B0:  MOVLW  03
01B1:  MOVWF  37
01B2:  CALL   085
....................       }break; 
01B3:  GOTO   1F3
....................  
....................       case 0x30 : 
....................       { 
....................          moverMotor (motorpin[3], 0) ; 
01B4:  MOVF   30,W
01B5:  MOVWF  36
01B6:  MOVF   2F,W
01B7:  MOVWF  35
01B8:  CLRF   37
01B9:  CALL   085
....................       }break; 
01BA:  GOTO   1F3
....................  
....................       case 0x31 : 
....................       { 
....................          moverMotor (motorpin[3], 1) ; 
01BB:  MOVF   30,W
01BC:  MOVWF  36
01BD:  MOVF   2F,W
01BE:  MOVWF  35
01BF:  MOVLW  01
01C0:  MOVWF  37
01C1:  CALL   085
....................       }break; 
01C2:  GOTO   1F3
....................  
....................       case 0x32 : 
....................       { 
....................          moverMotor (motorpin[3], 2) ; 
01C3:  MOVF   30,W
01C4:  MOVWF  36
01C5:  MOVF   2F,W
01C6:  MOVWF  35
01C7:  MOVLW  02
01C8:  MOVWF  37
01C9:  CALL   085
....................       }break; 
01CA:  GOTO   1F3
....................  
....................       case 0x33 : 
....................       { 
....................          moverMotor (motorpin[3], 3) ; 
01CB:  MOVF   30,W
01CC:  MOVWF  36
01CD:  MOVF   2F,W
01CE:  MOVWF  35
01CF:  MOVLW  03
01D0:  MOVWF  37
01D1:  CALL   085
....................       }break; 
01D2:  GOTO   1F3
....................  
....................       case 0xA0 : 
....................       { 
....................          set_pwm1_duty (0) ; 
01D3:  CLRF   15
....................       }break; 
01D4:  GOTO   1F3
....................  
....................       case 0xA1 : 
....................       { 
....................          set_pwm1_duty (15) ; 
01D5:  MOVLW  0F
01D6:  MOVWF  15
....................       }break; 
01D7:  GOTO   1F3
....................  
....................       case 0xA2 : 
....................       { 
....................          set_pwm1_duty (31) ; 
01D8:  MOVLW  1F
01D9:  MOVWF  15
....................       }break; 
01DA:  GOTO   1F3
....................  
....................       case 0xA3 : 
....................       { 
....................          set_pwm1_duty (46) ; 
01DB:  MOVLW  2E
01DC:  MOVWF  15
....................       }break; 
01DD:  GOTO   1F3
....................  
....................       case 0xA4 : 
....................       { 
....................          set_pwm1_duty (62) ; 
01DE:  MOVLW  3E
01DF:  MOVWF  15
....................       }break; 
01E0:  GOTO   1F3
....................  
....................       case 0xA5 : 
....................       { 
....................          set_pwm1_duty (77) ; 
01E1:  MOVLW  4D
01E2:  MOVWF  15
....................       }break; 
01E3:  GOTO   1F3
....................  
....................       case 0xA6 : 
....................       { 
....................          set_pwm1_duty (93) ; 
01E4:  MOVLW  5D
01E5:  MOVWF  15
....................       }break; 
01E6:  GOTO   1F3
....................  
....................       case 0xA7 : 
....................       { 
....................          set_pwm1_duty (108) ; 
01E7:  MOVLW  6C
01E8:  MOVWF  15
....................       }break; 
01E9:  GOTO   1F3
....................  
....................       case 0xA8 : 
....................       { 
....................          set_pwm1_duty (124) ; 
01EA:  MOVLW  7C
01EB:  MOVWF  15
....................       }break; 
01EC:  GOTO   1F3
....................  
....................       case 0xA9 : 
....................       { 
....................          set_pwm1_duty (139) ; 
01ED:  MOVLW  8B
01EE:  MOVWF  15
....................       }break; 
01EF:  GOTO   1F3
....................  
....................       case 0xAA : 
....................       { 
....................          set_pwm1_duty (156) ; 
01F0:  MOVLW  9C
01F1:  MOVWF  15
....................       }break; 
01F2:  GOTO   1F3
....................    } 
.................... } 
01F3:  GOTO   235 (RETURN)
....................  
.................... void desativarAll() 
.................... { 
....................    moverMotor (motorpin[0], 0) ; 
....................    moverMotor (motorpin[1], 0) ; 
....................    moverMotor (motorpin[2], 0) ; 
....................    moverMotor (motorpin[3], 0) ; 
....................    set_pwm1_duty (0) ; 
.................... } 
....................  
....................  
.................... #int_TIMER1 
....................  
.................... void  TIMER1_isr(void)  
.................... { 
....................   // desativarAll () ; 
.................... } 
....................  
*
0035:  BCF    0C.0
0036:  BCF    0A.3
0037:  GOTO   022
.................... void main() 
.................... { 
*
01F4:  CLRF   04
01F5:  BCF    03.7
01F6:  MOVLW  1F
01F7:  ANDWF  03,F
01F8:  BSF    03.5
01F9:  BSF    0E.3
01FA:  MOVLW  19
01FB:  MOVWF  19
01FC:  MOVLW  A2
01FD:  MOVWF  18
01FE:  MOVLW  90
01FF:  BCF    03.5
0200:  MOVWF  18
0201:  MOVLW  07
0202:  MOVWF  1F
....................    setup_timer_0 (RTCC_INTERNAL|RTCC_DIV_256); 
0203:  BSF    03.5
0204:  MOVF   01,W
0205:  ANDLW  C0
0206:  IORLW  07
0207:  MOVWF  01
....................    setup_timer_1 (T1_INTERNAL|T1_DIV_BY_8); 
0208:  MOVLW  B5
0209:  BCF    03.5
020A:  MOVWF  10
....................    setup_timer_2(T2_DIV_BY_16,155,1); 
020B:  MOVLW  00
020C:  MOVWF  78
020D:  IORLW  06
020E:  MOVWF  12
020F:  MOVLW  9B
0210:  BSF    03.5
0211:  MOVWF  12
....................    setup_ccp1(CCP_PWM); 
0212:  BCF    06.3
0213:  BCF    03.5
0214:  BCF    06.3
0215:  MOVLW  0C
0216:  MOVWF  17
....................    set_pwm1_duty(0); 
0217:  CLRF   15
....................    setup_comparator(NC_NC_NC_NC); 
0218:  MOVLW  07
0219:  MOVWF  1F
021A:  BSF    03.5
021B:  MOVF   05,W
021C:  MOVLW  03
021D:  MOVWF  77
021E:  DECFSZ 77,F
021F:  GOTO   21E
0220:  BCF    03.5
0221:  MOVF   1F,W
0222:  BCF    0C.6
....................    setup_vref(FALSE); 
0223:  BSF    03.5
0224:  CLRF   1F
....................    enable_interrupts (int_TIMER1); 
0225:  BSF    0C.0
....................    enable_interrupts (GLOBAL); 
0226:  MOVLW  C0
0227:  BCF    03.5
0228:  IORWF  0B,F
....................  
....................    config (); 
0229:  GOTO   038
....................  
....................    while (true) 
....................    { 
....................       if (ReceberComando ()==1) 
022A:  GOTO   049
022B:  DECFSZ 78,W
022C:  GOTO   235
....................       { 
....................          output_toggle (led) ; 
022D:  BSF    03.5
022E:  BCF    05.2
022F:  MOVLW  04
0230:  BCF    03.5
0231:  XORWF  05,F
....................          verificaComando (cmd[2]); 
0232:  MOVF   33,W
0233:  MOVWF  34
0234:  GOTO   104
....................       } 
....................    } 
0235:  GOTO   22A
.................... } 
....................  
0236:  SLEEP

Configuration Fuses:
   Word  1: 3F38   NOWDT NOPUT NOPROTECT NOBROWNOUT MCLR NOLVP INTRC_IO NOCPD
