CCS PCM C Compiler, Version 4.074, 38112               20-mar-14 18:27

               Filename: C:\Users\Zenner\SkyDrive\RDC\RoboDeCombate\src\motherboard\basic\16f628a\main.lst

               ROM used: 533 words (26%)
                         Largest free fragment is 1515
               RAM used: 27 (12%) at main() level
                         38 (17%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   1D6
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  28
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  MOVF   7B,W
0019:  MOVWF  27
001A:  BCF    03.7
001B:  BCF    03.5
001C:  MOVLW  8C
001D:  MOVWF  04
001E:  BTFSS  00.0
001F:  GOTO   022
0020:  BTFSC  0C.0
0021:  GOTO   035
0022:  MOVF   22,W
0023:  MOVWF  04
0024:  MOVF   23,W
0025:  MOVWF  77
0026:  MOVF   24,W
0027:  MOVWF  78
0028:  MOVF   25,W
0029:  MOVWF  79
002A:  MOVF   26,W
002B:  MOVWF  7A
002C:  MOVF   27,W
002D:  MOVWF  7B
002E:  MOVF   28,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
.................... #include "main.h" 
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES INTRC_IO              	//Internal RC Osc, no CLKOUT 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
....................  
.................... #use delay(clock=4000000) 
01C1:  MOVLW  35
01C2:  MOVWF  04
01C3:  BCF    03.7
01C4:  MOVF   00,W
01C5:  BTFSC  03.2
01C6:  GOTO   1D5
01C7:  MOVLW  01
01C8:  MOVWF  78
01C9:  CLRF   77
01CA:  DECFSZ 77,F
01CB:  GOTO   1CA
01CC:  DECFSZ 78,F
01CD:  GOTO   1C9
01CE:  MOVLW  4A
01CF:  MOVWF  77
01D0:  DECFSZ 77,F
01D1:  GOTO   1D0
01D2:  GOTO   1D3
01D3:  DECFSZ 00,F
01D4:  GOTO   1C7
01D5:  GOTO   213 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B2,rcv=PIN_B1,bits=8) 
....................  
....................  
.................... #include "lib/config.c" 
.................... /** 
.................... A0 = USE MOTOR_0 
.................... A1 = USE MOTOR_0 
.................... A2 = NOT USE 
.................... A3 = NOT USE 
.................... A4 = NOT USE 
.................... A5 = MRCLR 
.................... A6 = USE MOTOR_1 
.................... A7 = USE MOTOR_1 
.................... B0 = NOT USE 
.................... B1 = USE RX 
.................... B2 = USE TX 
.................... B3 = USE LED 
.................... B4 = USE MOTOR_2 
.................... B5 = USE MOTOR_2 
.................... B6 = USE MOTOR_3 
.................... B7 = USE MOTOR_3 
.................... */ 
.................... /* campos para validação de comando  
....................    todas as mensagens devem ser enviadas da seguinte maneira 
....................    msg_valid_1 , msg_valid_2 , comando 1 , comando 2 
....................    tem a funçao de evitar statica e recebimento indevido 
....................  
.................... */ 
.................... const int msg_valid_1 = 0xf0; 
.................... const int msg_valid_2 = 0x20; 
.................... //estrutura para facilitar o uso dos pinos em funções 
.................... struct MotorPin 
.................... { 
....................    int pin_enable; 
....................    int pin_dir; 
.................... }; 
....................  
.................... // cria o numero de esquemas do struct desejada , corresponde ao numero 
.................... // de motores que vc quer controlar 
.................... struct Motorpin motorpin[4]; 
....................  
.................... // variavel para armazenar os comandos recebidos do serial; 
.................... int cmd[4]; 
....................  
.................... // constante criada para facilitar a chamada do led no programa 
.................... const int led = PIN_B3; 
....................  
.................... // função de configuração , não altere se nao souber o que esta fazendo 
.................... void config() 
.................... { 
....................    motorpin[0].pin_enable = PIN_A0; 
*
003D:  MOVLW  28
003E:  MOVWF  29
....................    motorpin[0].pin_dir = PIN_A1; 
003F:  MOVLW  29
0040:  MOVWF  2A
....................    motorpin[1].pin_enable = PIN_A6; 
0041:  MOVLW  2E
0042:  MOVWF  2B
....................    motorpin[1].pin_dir = PIN_A7; 
0043:  MOVLW  2F
0044:  MOVWF  2C
....................    motorpin[2].pin_enable = PIN_B4; 
0045:  MOVLW  34
0046:  MOVWF  2D
....................    motorpin[2].pin_dir = PIN_B5; 
0047:  MOVLW  35
0048:  MOVWF  2E
....................    motorpin[3].pin_enable = PIN_B6; 
0049:  MOVLW  36
004A:  MOVWF  2F
....................    motorpin[3].pin_dir = PIN_B7; 
004B:  MOVLW  37
004C:  MOVWF  30
.................... } 
004D:  GOTO   206 (RETURN)
....................  
....................  
.................... #include "lib/comand.c" 
.................... void moverMotor(struct Motorpin motorpin,int comando) 
.................... { 
....................    switch (comando) 
....................    { 
*
006E:  MOVF   39,W
006F:  ADDLW  FC
0070:  BTFSC  03.0
0071:  GOTO   0E4
0072:  ADDLW  04
0073:  GOTO   0E5
....................       case 0: 
....................       { 
....................          output_low (motorPin.pin_enable) ; 
0074:  MOVF   37,W
0075:  MOVWF  3A
0076:  CLRF   3B
0077:  CLRF   3D
0078:  CLRF   3C
0079:  CALL   04E
007A:  MOVF   37,W
007B:  MOVWF  3A
007C:  CLRF   3B
007D:  CLRF   3D
007E:  MOVLW  80
007F:  MOVWF  3C
0080:  CALL   04E
....................          output_low (motorPin.pin_dir) ; 
0081:  MOVF   38,W
0082:  MOVWF  3A
0083:  CLRF   3B
0084:  CLRF   3D
0085:  CLRF   3C
0086:  CALL   04E
0087:  MOVF   38,W
0088:  MOVWF  3A
0089:  CLRF   3B
008A:  CLRF   3D
008B:  MOVLW  80
008C:  MOVWF  3C
008D:  CALL   04E
....................       }break; 
008E:  GOTO   0E4
....................  
....................       case 1: 
....................       { 
....................          output_low (motorPin.pin_enable) ; 
008F:  MOVF   37,W
0090:  MOVWF  3A
0091:  CLRF   3B
0092:  CLRF   3D
0093:  CLRF   3C
0094:  CALL   04E
0095:  MOVF   37,W
0096:  MOVWF  3A
0097:  CLRF   3B
0098:  CLRF   3D
0099:  MOVLW  80
009A:  MOVWF  3C
009B:  CALL   04E
....................          output_high (motorPin.pin_dir) ; 
009C:  MOVF   38,W
009D:  MOVWF  3A
009E:  MOVLW  01
009F:  MOVWF  3B
00A0:  CLRF   3D
00A1:  CLRF   3C
00A2:  CALL   04E
00A3:  MOVF   38,W
00A4:  MOVWF  3A
00A5:  CLRF   3B
00A6:  CLRF   3D
00A7:  MOVLW  80
00A8:  MOVWF  3C
00A9:  CALL   04E
....................       }break; 
00AA:  GOTO   0E4
....................  
....................       case 2: 
....................       { 
....................          output_high (motorPin.pin_enable) ; 
00AB:  MOVF   37,W
00AC:  MOVWF  3A
00AD:  MOVLW  01
00AE:  MOVWF  3B
00AF:  CLRF   3D
00B0:  CLRF   3C
00B1:  CALL   04E
00B2:  MOVF   37,W
00B3:  MOVWF  3A
00B4:  CLRF   3B
00B5:  CLRF   3D
00B6:  MOVLW  80
00B7:  MOVWF  3C
00B8:  CALL   04E
....................          output_low (motorPin.pin_dir) ; 
00B9:  MOVF   38,W
00BA:  MOVWF  3A
00BB:  CLRF   3B
00BC:  CLRF   3D
00BD:  CLRF   3C
00BE:  CALL   04E
00BF:  MOVF   38,W
00C0:  MOVWF  3A
00C1:  CLRF   3B
00C2:  CLRF   3D
00C3:  MOVLW  80
00C4:  MOVWF  3C
00C5:  CALL   04E
....................       }break; 
00C6:  GOTO   0E4
....................  
....................       case 3: 
....................       { 
....................          output_high (motorPin.pin_enable) ; 
00C7:  MOVF   37,W
00C8:  MOVWF  3A
00C9:  MOVLW  01
00CA:  MOVWF  3B
00CB:  CLRF   3D
00CC:  CLRF   3C
00CD:  CALL   04E
00CE:  MOVF   37,W
00CF:  MOVWF  3A
00D0:  CLRF   3B
00D1:  CLRF   3D
00D2:  MOVLW  80
00D3:  MOVWF  3C
00D4:  CALL   04E
....................          output_high (motorPin.pin_dir) ; 
00D5:  MOVF   38,W
00D6:  MOVWF  3A
00D7:  MOVLW  01
00D8:  MOVWF  3B
00D9:  CLRF   3D
00DA:  CLRF   3C
00DB:  CALL   04E
00DC:  MOVF   38,W
00DD:  MOVWF  3A
00DE:  CLRF   3B
00DF:  CLRF   3D
00E0:  MOVLW  80
00E1:  MOVWF  3C
00E2:  CALL   04E
....................       }break; 
00E3:  GOTO   0E4
....................    } 
.................... } 
00E4:  RETLW  00
....................  
.................... void verificaComando(int cmd[]){ 
....................  
.................... if ((cmd[0] == msg_valid_1)&& (cmd[1] == msg_valid_2)){ 
*
00ED:  MOVF   35,W
00EE:  MOVWF  04
00EF:  BCF    03.7
00F0:  BTFSC  36.0
00F1:  BSF    03.7
00F2:  MOVF   00,W
00F3:  SUBLW  F0
00F4:  BTFSS  03.2
00F5:  GOTO   188
00F6:  MOVLW  01
00F7:  ADDWF  35,W
00F8:  MOVWF  04
00F9:  BCF    03.7
00FA:  BTFSC  36.0
00FB:  BSF    03.7
00FC:  MOVF   00,W
00FD:  SUBLW  20
00FE:  BTFSS  03.2
00FF:  GOTO   188
....................    switch (cmd[2]){ 
0100:  MOVLW  02
0101:  ADDWF  35,W
0102:  MOVWF  04
0103:  BCF    03.7
0104:  BTFSC  36.0
0105:  BSF    03.7
0106:  MOVF   00,W
0107:  ADDLW  CC
0108:  BTFSC  03.0
0109:  GOTO   188
010A:  ADDLW  34
010B:  GOTO   189
....................       case 0x00 :{ 
....................       moverMotor(motorpin[0],0); 
010C:  MOVF   2A,W
010D:  MOVWF  38
010E:  MOVF   29,W
010F:  MOVWF  37
0110:  CLRF   39
0111:  CALL   06E
....................       }break; 
0112:  GOTO   188
....................       case 0x01 :{ 
....................       moverMotor(motorpin[0],1); 
0113:  MOVF   2A,W
0114:  MOVWF  38
0115:  MOVF   29,W
0116:  MOVWF  37
0117:  MOVLW  01
0118:  MOVWF  39
0119:  CALL   06E
....................       }break; 
011A:  GOTO   188
....................       case 0x02 :{ 
....................       moverMotor(motorpin[0],2); 
011B:  MOVF   2A,W
011C:  MOVWF  38
011D:  MOVF   29,W
011E:  MOVWF  37
011F:  MOVLW  02
0120:  MOVWF  39
0121:  CALL   06E
....................       }break; 
0122:  GOTO   188
....................       case 0x03 :{ 
....................       moverMotor(motorpin[0],3); 
0123:  MOVF   2A,W
0124:  MOVWF  38
0125:  MOVF   29,W
0126:  MOVWF  37
0127:  MOVLW  03
0128:  MOVWF  39
0129:  CALL   06E
....................       }break; 
012A:  GOTO   188
....................       case 0x10 :{ 
....................       moverMotor(motorpin[1],0); 
012B:  MOVF   2C,W
012C:  MOVWF  38
012D:  MOVF   2B,W
012E:  MOVWF  37
012F:  CLRF   39
0130:  CALL   06E
....................       }break; 
0131:  GOTO   188
....................       case 0x11 :{ 
....................       moverMotor(motorpin[1],1); 
0132:  MOVF   2C,W
0133:  MOVWF  38
0134:  MOVF   2B,W
0135:  MOVWF  37
0136:  MOVLW  01
0137:  MOVWF  39
0138:  CALL   06E
....................       }break; 
0139:  GOTO   188
....................       case 0x12 :{ 
....................       moverMotor(motorpin[1],2); 
013A:  MOVF   2C,W
013B:  MOVWF  38
013C:  MOVF   2B,W
013D:  MOVWF  37
013E:  MOVLW  02
013F:  MOVWF  39
0140:  CALL   06E
....................       }break; 
0141:  GOTO   188
....................       case 0x13 :{ 
....................       moverMotor(motorpin[1],3); 
0142:  MOVF   2C,W
0143:  MOVWF  38
0144:  MOVF   2B,W
0145:  MOVWF  37
0146:  MOVLW  03
0147:  MOVWF  39
0148:  CALL   06E
....................       }break; 
0149:  GOTO   188
....................       case 0x20 :{ 
....................       moverMotor(motorpin[2],0); 
014A:  MOVF   2E,W
014B:  MOVWF  38
014C:  MOVF   2D,W
014D:  MOVWF  37
014E:  CLRF   39
014F:  CALL   06E
....................       }break; 
0150:  GOTO   188
....................       case 0x21 :{ 
....................       moverMotor(motorpin[2],1); 
0151:  MOVF   2E,W
0152:  MOVWF  38
0153:  MOVF   2D,W
0154:  MOVWF  37
0155:  MOVLW  01
0156:  MOVWF  39
0157:  CALL   06E
....................       }break; 
0158:  GOTO   188
....................       case 0x22 :{ 
....................       moverMotor(motorpin[2],2); 
0159:  MOVF   2E,W
015A:  MOVWF  38
015B:  MOVF   2D,W
015C:  MOVWF  37
015D:  MOVLW  02
015E:  MOVWF  39
015F:  CALL   06E
....................       }break; 
0160:  GOTO   188
....................       case 0x23 :{ 
....................       moverMotor(motorpin[2],3); 
0161:  MOVF   2E,W
0162:  MOVWF  38
0163:  MOVF   2D,W
0164:  MOVWF  37
0165:  MOVLW  03
0166:  MOVWF  39
0167:  CALL   06E
....................       }break; 
0168:  GOTO   188
....................       case 0x30 :{ 
....................       moverMotor(motorpin[3],0); 
0169:  MOVF   30,W
016A:  MOVWF  38
016B:  MOVF   2F,W
016C:  MOVWF  37
016D:  CLRF   39
016E:  CALL   06E
....................       }break; 
016F:  GOTO   188
....................       case 0x31 :{ 
....................       moverMotor(motorpin[3],1); 
0170:  MOVF   30,W
0171:  MOVWF  38
0172:  MOVF   2F,W
0173:  MOVWF  37
0174:  MOVLW  01
0175:  MOVWF  39
0176:  CALL   06E
....................       }break; 
0177:  GOTO   188
....................       case 0x32 :{ 
....................       moverMotor(motorpin[3],2); 
0178:  MOVF   30,W
0179:  MOVWF  38
017A:  MOVF   2F,W
017B:  MOVWF  37
017C:  MOVLW  02
017D:  MOVWF  39
017E:  CALL   06E
....................       }break; 
017F:  GOTO   188
....................       case 0x33 :{ 
....................       moverMotor(motorpin[3],3); 
0180:  MOVF   30,W
0181:  MOVWF  38
0182:  MOVF   2F,W
0183:  MOVWF  37
0184:  MOVLW  03
0185:  MOVWF  39
0186:  CALL   06E
....................       }break; 
0187:  GOTO   188
....................    } 
.................... } 
....................  
.................... } 
0188:  GOTO   210 (RETURN)
....................  
....................  
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
.................... output_toggle(led); 
*
0035:  BSF    03.5
0036:  BCF    06.3
0037:  MOVLW  08
0038:  BCF    03.5
0039:  XORWF  06,F
.................... } 
003A:  BCF    0C.0
003B:  BCF    0A.3
003C:  GOTO   022
.................... void main() 
.................... { 
*
01D6:  CLRF   04
01D7:  BCF    03.7
01D8:  MOVLW  1F
01D9:  ANDWF  03,F
01DA:  BSF    03.5
01DB:  BSF    0E.3
01DC:  MOVLW  19
01DD:  MOVWF  19
01DE:  MOVLW  A6
01DF:  MOVWF  18
01E0:  MOVLW  90
01E1:  BCF    03.5
01E2:  MOVWF  18
01E3:  MOVLW  07
01E4:  MOVWF  1F
....................  
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); 
01E5:  BSF    03.5
01E6:  MOVF   01,W
01E7:  ANDLW  C0
01E8:  IORLW  07
01E9:  MOVWF  01
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
01EA:  MOVLW  B5
01EB:  BCF    03.5
01EC:  MOVWF  10
....................    setup_timer_2(T2_DISABLED,0,1); 
01ED:  MOVLW  00
01EE:  MOVWF  78
01EF:  MOVWF  12
01F0:  MOVLW  00
01F1:  BSF    03.5
01F2:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
01F3:  MOVLW  07
01F4:  BCF    03.5
01F5:  MOVWF  1F
01F6:  BSF    03.5
01F7:  MOVF   05,W
01F8:  MOVLW  03
01F9:  MOVWF  77
01FA:  DECFSZ 77,F
01FB:  GOTO   1FA
01FC:  BCF    03.5
01FD:  MOVF   1F,W
01FE:  BCF    0C.6
....................    setup_vref(FALSE); 
01FF:  BSF    03.5
0200:  CLRF   1F
....................    enable_interrupts(INT_TIMER1); 
0201:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
0202:  MOVLW  C0
0203:  BCF    03.5
0204:  IORWF  0B,F
....................    config(); 
0205:  GOTO   03D
....................    cmd[0]=msg_valid_1; 
0206:  MOVLW  F0
0207:  MOVWF  31
....................    cmd[1]=msg_valid_2; 
0208:  MOVLW  20
0209:  MOVWF  32
....................    cmd[2]=0; 
020A:  CLRF   33
....................    while(true){ 
....................    cmd[2]++; 
020B:  INCF   33,F
....................    verificaComando(cmd); 
020C:  CLRF   36
020D:  MOVLW  31
020E:  MOVWF  35
020F:  GOTO   0ED
....................    delay_ms(100); 
0210:  MOVLW  64
0211:  MOVWF  35
0212:  GOTO   1C1
....................   // output_toggle(led); 
....................    } 
0213:  GOTO   20B
.................... //Setup_Oscillator parameter not selected from Intr Oscillator Config tab 
....................  
....................    // TODO: USER CODE!! 
....................  
.................... } 
0214:  SLEEP

Configuration Fuses:
   Word  1: 3F38   NOWDT NOPUT NOPROTECT NOBROWNOUT MCLR NOLVP INTRC_IO NOCPD
